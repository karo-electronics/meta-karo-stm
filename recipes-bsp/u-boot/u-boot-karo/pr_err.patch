Index: u-boot/arch/arm/mach-stm32mp/spl.c
===================================================================
--- u-boot.orig/arch/arm/mach-stm32mp/spl.c
+++ u-boot/arch/arm/mach-stm32mp/spl.c
@@ -58,6 +58,7 @@ u32 spl_boot_mode(const u32 boot_device)
 	return MMCSD_MODE_RAW;
 }
 
+#ifdef CONFIG_SYS_MMCSD_RAW_MODE_U_BOOT_USE_PARTITION
 int spl_boot_partition(const u32 boot_device)
 {
 	switch (boot_device) {
@@ -69,6 +70,7 @@ int spl_boot_partition(const u32 boot_de
 		return -EINVAL;
 	}
 }
+#endif
 
 #ifdef CONFIG_SPL_DISPLAY_PRINT
 void spl_display_print(void)
@@ -76,7 +78,8 @@ void spl_display_print(void)
 	DECLARE_GLOBAL_DATA_PTR;
 	const char *model;
 
-	/* same code than show_board_info() but not compiled for SPL
+	/*
+	 * same code as show_board_info() but that is not compiled for SPL
 	 * see CONFIG_DISPLAY_BOARDINFO & common/board_info.c
 	 */
 	model = fdt_getprop(gd->fdt_blob, 0, "model", NULL);
@@ -94,25 +97,25 @@ void board_init_f(ulong dummy)
 
 	ret = spl_early_init();
 	if (ret) {
-		debug("spl_early_init() failed: %d\n", ret);
+		pr_err("spl_early_init() failed: %d\n", ret);
 		hang();
 	}
 
 	ret = uclass_get_device(UCLASS_CLK, 0, &dev);
 	if (ret) {
-		debug("Clock init failed: %d\n", ret);
+		pr_err("Clock init failed: %d\n", ret);
 		return;
 	}
 
 	ret = uclass_get_device(UCLASS_RESET, 0, &dev);
 	if (ret) {
-		debug("Reset init failed: %d\n", ret);
+		pr_err("Reset init failed: %d\n", ret);
 		return;
 	}
 
 	ret = uclass_get_device(UCLASS_PINCTRL, 0, &dev);
 	if (ret) {
-		debug("%s: Cannot find pinctrl device\n", __func__);
+		pr_err("%s: Cannot find pinctrl device\n", __func__);
 		return;
 	}
 
@@ -123,7 +126,7 @@ void board_init_f(ulong dummy)
 
 	ret = uclass_get_device(UCLASS_RAM, 0, &dev);
 	if (ret) {
-		printf("DRAM init failed: %d\n", ret);
+		pr_err("DRAM init failed: %d\n", ret);
 		hang();
 	}
 }
Index: u-boot/arch/arm/mach-stm32mp/cmd_stm32prog/stm32prog.c
===================================================================
--- u-boot.orig/arch/arm/mach-stm32mp/cmd_stm32prog/stm32prog.c
+++ u-boot/arch/arm/mach-stm32mp/cmd_stm32prog/stm32prog.c
@@ -100,30 +100,30 @@ u8 stm32prog_header_check(struct raw_hea
 	header->image_checksum = 0x0;
 	header->image_length = 0x0;
 
-	/*pr_debug("%s entry\n", __func__);*/
+	pr_debug("%s entry\n", __func__);
 	if (!raw_header || !header) {
-		pr_debug("%s:no header data\n", __func__);
+		pr_err("%s: no header data\n", __func__);
 		return -1;
 	}
 	if (raw_header->magic_number !=
 		(('S' << 0) | ('T' << 8) | ('M' << 16) | (0x32 << 24))) {
-		pr_debug("%s:invalid magic number : 0x%x\n",
-			 __func__, raw_header->magic_number);
+		pr_err("%s: invalid magic number : 0x%08x\n",
+		       __func__, raw_header->magic_number);
 		return -2;
 	}
 	/* only header v1.0 supported */
 	if (raw_header->header_version != 0x00010000) {
-		pr_debug("%s:invalid header version : 0x%x\n",
-			 __func__, raw_header->header_version);
+		pr_err("%s: invalid header version : 0x%08x\n",
+		       __func__, raw_header->header_version);
 		return -3;
 	}
 	if (raw_header->reserved1 != 0x0 || raw_header->reserved2) {
-		pr_debug("%s:invalid reserved field\n", __func__);
+		pr_err("%s: invalid reserved field\n", __func__);
 		return -4;
 	}
 	for (i = 0; i < (sizeof(raw_header->padding) / 4); i++) {
 		if (raw_header->padding[i] != 0) {
-			pr_debug("%s:invalid padding field\n", __func__);
+			pr_err("%s: invalid padding field\n", __func__);
 			return -5;
 		}
 	}
@@ -131,7 +131,7 @@ u8 stm32prog_header_check(struct raw_hea
 	header->image_checksum = le32_to_cpu(raw_header->image_checksum);
 	header->image_length = le32_to_cpu(raw_header->image_length);
 
-	/*pr_debug("%s exit\n", __func__);*/
+	pr_debug("%s exit\n", __func__);
 
 	return 0;
 }
@@ -185,7 +185,7 @@ static int parse_option(struct stm32prog
 		return -EINVAL;
 	}
 
-	/* pr_debug("option : %x\n", part->option); */
+	/* pr_debug("option : %08x\n", part->option); */
 
 	return result;
 }
@@ -202,7 +202,7 @@ static int parse_id(struct stm32prog_dat
 		stm32prog_err("Layout: invalid phase value = %s", p);
 		result = -EINVAL;
 	}
-	/* pr_debug("phase : %x\n", part->id); */
+	/* pr_debug("phase : %08x\n", part->id); */
 
 	return result;
 }
@@ -326,7 +326,7 @@ static int parse_offset(struct stm32prog
 			result = -EINVAL;
 		}
 	}
-	/* pr_debug("addr : 0x%llx, part_id : %d\n", part->addr,
+	/* pr_debug("addr : 0x%08llx, part_id : %d\n", part->addr,
 	 *       part->part_id);
 	 */
 
@@ -368,7 +368,7 @@ static int parse_flash_layout(struct stm
 
 		checksum = stm32prog_header_checksum(addr, &data->header);
 		if (checksum != data->header.image_checksum) {
-			stm32prog_err("Layout: invalid checksum : 0x%x expected 0x%x",
+			stm32prog_err("Layout: invalid checksum: 0x%08x expected 0x%08x",
 				      checksum, data->header.image_checksum);
 			return -EIO;
 		}
@@ -560,7 +560,7 @@ static int init_device(struct stm32prog_
 		}
 		pr_debug("MMC %d: lba=%ld blksz=%ld\n", dev->dev_id,
 			 block_dev->lba, block_dev->blksz);
-		pr_debug(" available address = 0x%llx..0x%llx\n",
+		pr_debug(" available address = 0x%08llx..0x%08llx\n",
 			 first_addr, last_addr);
 		break;
 #ifdef CONFIG_MTD_PARTITIONS
@@ -616,12 +616,12 @@ static int init_device(struct stm32prog_
 		dev->erase_size = mtd->erasesize;
 		pr_debug("MTD device %s : size=%lld erasesize=%d\n",
 			 mtd_id, mtd->size, mtd->erasesize);
-		pr_debug(" available address = 0x%llx..0x%llx\n",
+		pr_debug(" available address = 0x%08llx..0x%08llx\n",
 			 first_addr, last_addr);
 	}
 	dev->mtd = mtd;
 #endif
-	pr_debug(" erase size = 0x%x\n", dev->erase_size);
+	pr_debug(" erase size = 0x%08x\n", dev->erase_size);
 	dev->block_dev = block_dev;
 
 	/* order partition list in offset order */
@@ -673,7 +673,7 @@ static int init_device(struct stm32prog_
 					part->size = next_part->addr -
 						     part->addr;
 				} else {
-					stm32prog_err("%s: invalid address : 0x%llx >= 0x%llx",
+					stm32prog_err("%s: invalid address : 0x%08llx >= 0x%08llx",
 						      part->name, part->addr,
 						      next_part->addr);
 					return -EINVAL;
@@ -682,21 +682,21 @@ static int init_device(struct stm32prog_
 				if (part->addr <= last_addr) {
 					part->size = last_addr - part->addr;
 				} else {
-					stm32prog_err("%s: invalid address 0x%llx (max=0x%llx)",
+					stm32prog_err("%s: invalid address 0x%08llx (max=0x%08llx)",
 						      part->name, part->addr,
 						      last_addr);
 					return -EINVAL;
 				}
 			}
 			if (part->addr < first_addr) {
-				stm32prog_err("%s: invalid address 0x%llx (min=0x%llx)",
+				stm32prog_err("%s: invalid address 0x%08llx (min=0x%08llx)",
 					      part->name, part->addr,
 					      first_addr);
 				return -EINVAL;
 			}
 		}
 		if ((part->addr & ((u64)part->dev->erase_size - 1)) != 0) {
-			stm32prog_err("%s: not aligned address : 0x%llx on erase size 0x%x",
+			stm32prog_err("%s: not aligned address : 0x%08llx on erase size 0x%08x",
 				      part->name, part->addr,
 				      part->dev->erase_size);
 			return -EINVAL;
@@ -753,13 +753,13 @@ static int init_device(struct stm32prog_
 		pr_debug(" %08llx %08llx\n", part_addr, part_size);
 
 		if (part->addr != part_addr) {
-			stm32prog_err("%s: Bad address requested for partition %d = 0x%llx <> 0x%llx",
+			stm32prog_err("%s: Bad address requested for partition %d = 0x%08llx <> 0x%08llx",
 				      part->name, part->part_id, part->addr,
 				      part_addr);
 			return -ENODEV;
 		}
 		if (part->size != part_size) {
-			stm32prog_err("%s: Bad size requested for partition %d = 0x%llx <> 0x%llx",
+			stm32prog_err("%s: Bad size requested for partition %d = 0x%08llx <> 0x%08llx",
 				      part->name, part->part_id, part->size,
 				      part_size);
 			return -ENODEV;
@@ -787,7 +787,7 @@ static int treat_partition_list(struct s
 		/* skip partition with IP="none" */
 		if (part->dev_type == DFU_DEV_VIRT) {
 			if (IS_SELECT(part)) {
-				stm32prog_err("Layout: selected none phase = 0x%x",
+				stm32prog_err("Layout: selected none phase = 0x%08x",
 					      part->id);
 				return -EINVAL;
 			}
@@ -805,7 +805,7 @@ static int treat_partition_list(struct s
 
 		if (part->id == PHASE_FLASHLAYOUT ||
 		    part->id > PHASE_LAST_USER) {
-			stm32prog_err("Layout: invalid phase = 0x%x",
+			stm32prog_err("Layout: invalid phase = 0x%08x",
 				      part->id);
 			return -EINVAL;
 		}
@@ -872,7 +872,7 @@ static int create_partitions(struct stm3
 				continue;
 
 			offset += snprintf(buf + offset, ENV_BUF_LEN - offset,
-					   "name=%s,start=0x%llx,size=0x%llx",
+					   "name=%s,start=0x%08llx,size=0x%08llx",
 					   part->name,
 					   part->addr,
 					   part->size);
@@ -986,13 +986,13 @@ static int stm32prog_alt_add(struct stm3
 		else
 			dfu_size = part->size;
 		offset += snprintf(buf + offset, ENV_BUF_LEN - offset,
-				   "raw 0x0 0x%llx", dfu_size);
+				   "raw 0x0 0x%08llx", dfu_size);
 	} else if (part->part_id < 0) {
 		u64 nb_blk = part->size / part->dev->lba_blk_size;
 
 		/* lba_blk_size, mmc->read_bl_len */
 		offset += snprintf(buf + offset, ENV_BUF_LEN - offset,
-				   "raw 0x%llx 0x%llx",
+				   "raw 0x%08llx 0x%08llx",
 				   part->addr, nb_blk);
 		offset += snprintf(buf + offset, ENV_BUF_LEN - offset,
 				   " mmcpart %d;", -(part->part_id));
@@ -1102,7 +1102,7 @@ static int dfu_init_entities(struct stm3
 	} else {
 		char buf[ENV_BUF_LEN];
 
-		sprintf(buf, "@FlashLayout/0x%02x/1*256Ke ram %x 40000",
+		sprintf(buf, "@FlashLayout/0x%02x/1*256Ke ram %08x 40000",
 			PHASE_FLASHLAYOUT, STM32_DDR_BASE);
 		ret = dfu_alt_add(dfu, "ram", NULL, buf);
 		pr_debug("dfu_alt_add(ram, NULL,%s) result %d\n", buf, ret);
@@ -1132,7 +1132,7 @@ static int dfu_init_entities(struct stm3
 int stm32prog_otp_write(struct stm32prog_data *data, u32 offset, u8 *buffer,
 			long *size)
 {
-	pr_debug("%s : %x %lx\n", __func__, offset, *size);
+	pr_debug("%s : %08x %08lx\n", __func__, offset, *size);
 
 	if (!data->otp_part) {
 		data->otp_part = memalign(CONFIG_SYS_CACHELINE_SIZE, OTP_SIZE);
@@ -1159,7 +1159,7 @@ int stm32prog_otp_read(struct stm32prog_
 #else
 	int result = 0;
 
-	pr_debug("%s : %x %lx\n", __func__, offset, *size);
+	pr_debug("%s : %08x %08lx\n", __func__, offset, *size);
 	/* alway read for first packet */
 	if (!offset) {
 		if (!data->otp_part)
@@ -1244,7 +1244,7 @@ int stm32prog_otp_start(struct stm32prog
 int stm32prog_pmic_write(struct stm32prog_data *data, u32 offset, u8 *buffer,
 			 long *size)
 {
-	pr_debug("%s : %x %lx\n", __func__, offset, *size);
+	pr_debug("%s : %08x %08lx\n", __func__, offset, *size);
 
 	if (!offset)
 		memset(data->pmic_part, 0, PMIC_SIZE);
@@ -1266,7 +1266,7 @@ int stm32prog_pmic_read(struct stm32prog
 #else /* CONFIG_DM_PMIC */
 	int result = 0;
 
-	pr_debug("%s : %x %lx\n", __func__, offset, *size);
+	pr_debug("%s : %08x %08lx\n", __func__, offset, *size);
 
 	/* alway request PMIC for first packet */
 	if (!offset) {
@@ -1451,7 +1451,7 @@ void stm32prog_next_phase(struct stm32pr
 	if (data->phase == PHASE_END)
 		puts("Phase=END\n");
 
-	/*pr_debug("%s exit phase=0x%x\n", __func__, data->phase);*/
+	/*pr_debug("%s exit phase=0x%08x\n", __func__, data->phase);*/
 }
 
 static int part_delete(struct stm32prog_data *data,
@@ -1491,7 +1491,7 @@ static int part_delete(struct stm32prog_
 #ifdef CONFIG_SPI_FLASH
 	case DFU_DEV_SF:
 		printf("on sf %d: ", part->dev->dev_id);
-		sprintf(cmdbuf, "sf erase 0x%llx 0x%llx",
+		sprintf(cmdbuf, "sf erase 0x%08llx 0x%08llx",
 			part->addr, part->size);
 		if (run_command(cmdbuf, 0)) {
 			ret = -1;
