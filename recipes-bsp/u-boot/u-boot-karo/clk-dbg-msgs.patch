Index: u-boot/drivers/clk/clk-uclass.c
===================================================================
--- u-boot.orig/drivers/clk/clk-uclass.c
+++ u-boot/drivers/clk/clk-uclass.c
@@ -39,10 +39,10 @@ int clk_get_by_index_platdata(struct ude
 static int clk_of_xlate_default(struct clk *clk,
 				struct ofnode_phandle_args *args)
 {
-	debug("%s(clk=%p)\n", __func__, clk);
+	dev_dbg(clk->dev, "%s(clk=%p)\n", __func__, clk);
 
 	if (args->args_count > 1) {
-		debug("Invaild args_count: %d\n", args->args_count);
+		dev_err(clk->dev, "Invaild args_count: %d\n", args->args_count);
 		return -EINVAL;
 	}
 
@@ -62,7 +62,8 @@ static int clk_get_by_indexed_prop(struc
 	struct udevice *dev_clk;
 	const struct clk_ops *ops;
 
-	debug("%s(dev=%p, index=%d, clk=%p)\n", __func__, dev, index, clk);
+	dev_dbg(dev, "%s(dev=%p, index=%d, clk=%p)\n",
+		__func__, dev, index, clk);
 
 	assert(clk);
 	clk->dev = NULL;
@@ -70,15 +71,15 @@ static int clk_get_by_indexed_prop(struc
 	ret = dev_read_phandle_with_args(dev, prop_name, "#clock-cells", 0,
 					 index, &args);
 	if (ret) {
-		debug("%s: fdtdec_parse_phandle_with_args failed: err=%d\n",
-		      __func__, ret);
+		dev_err(dev, "%s: fdtdec_parse_phandle_with_args failed: err=%d\n",
+			__func__, ret);
 		return ret;
 	}
 
 	ret = uclass_get_device_by_ofnode(UCLASS_CLK, args.node, &dev_clk);
 	if (ret) {
-		debug("%s: uclass_get_device_by_of_offset failed: err=%d\n",
-		      __func__, ret);
+		dev_err(dev, "%s: uclass_get_device_by_of_offset failed: err=%d\n",
+			__func__, ret);
 		return ret;
 	}
 
@@ -91,7 +92,7 @@ static int clk_get_by_indexed_prop(struc
 	else
 		ret = clk_of_xlate_default(clk, &args);
 	if (ret) {
-		debug("of_xlate() failed: %d\n", ret);
+		dev_err(dev, "of_xlate() failed: %d\n", ret);
 		return ret;
 	}
 
@@ -130,8 +131,8 @@ int clk_get_bulk(struct udevice *dev, st
 bulk_get_err:
 	err = clk_release_all(bulk->clks, bulk->count);
 	if (err)
-		debug("%s: could release all clocks for %p\n",
-		      __func__, dev);
+		dev_err(dev, "%s: could release all clocks: %d\n", __func__,
+			err);
 
 	return ret;
 }
@@ -146,8 +147,7 @@ static int clk_set_default_parents(struc
 	num_parents = dev_count_phandle_with_args(dev, "assigned-clock-parents",
 						  "#clock-cells");
 	if (num_parents < 0) {
-		debug("%s: could not read assigned-clock-parents for %p\n",
-		      __func__, dev);
+		dev_dbg(dev, "%s: no assigned-clock-parents\n", __func__);
 		return 0;
 	}
 
@@ -159,16 +159,16 @@ static int clk_set_default_parents(struc
 			continue;
 
 		if (ret) {
-			debug("%s: could not get parent clock %d for %s\n",
-			      __func__, index, dev_read_name(dev));
+			dev_err(dev, "%s: could not get parent clock[%d]\n",
+				__func__, index);
 			return ret;
 		}
 
 		ret = clk_get_by_indexed_prop(dev, "assigned-clocks",
 					      index, &clk);
 		if (ret) {
-			debug("%s: could not get assigned clock %d for %s\n",
-			      __func__, index, dev_read_name(dev));
+			dev_err(dev, "%s: could not get assigned clock[%d]\n",
+				__func__, index);
 			return ret;
 		}
 
@@ -182,8 +182,8 @@ static int clk_set_default_parents(struc
 			continue;
 
 		if (ret) {
-			debug("%s: failed to reparent clock %d for %s\n",
-			      __func__, index, dev_read_name(dev));
+			dev_err(dev, "%s: failed to reparent clock[%d]\n",
+				__func__, index);
 			return ret;
 		}
 	}
@@ -204,8 +204,8 @@ static int clk_set_default_rates(struct
 	if (size < 0)
 		return 0;
 
-	num_rates = size / sizeof(u32);
-	rates = calloc(num_rates, sizeof(u32));
+	num_rates = size / sizeof(*rates);
+	rates = calloc(num_rates, sizeof(*rates));
 	if (!rates)
 		return -ENOMEM;
 
@@ -221,15 +221,15 @@ static int clk_set_default_rates(struct
 		ret = clk_get_by_indexed_prop(dev, "assigned-clocks",
 					      index, &clk);
 		if (ret) {
-			debug("%s: could not get assigned clock %d for %s\n",
-			      __func__, index, dev_read_name(dev));
+			dev_dbg(dev, "%s: could not get assigned clock[%d]\n",
+				__func__, index);
 			continue;
 		}
 
 		ret = clk_set_rate(&clk, rates[index]);
 		if (ret < 0) {
-			debug("%s: failed to set rate on clock %d for %s\n",
-			      __func__, index, dev_read_name(dev));
+			dev_err(dev, "%s: failed to set rate on clock %d\n",
+				__func__, index);
 			break;
 		}
 	}
@@ -247,7 +247,7 @@ int clk_set_defaults(struct udevice *dev
 	if (!(gd->flags & GD_FLG_RELOC))
 		return 0;
 
-	debug("%s(%s)\n", __func__, dev_read_name(dev));
+	dev_dbg(dev, "%s\n", __func__);
 
 	ret = clk_set_default_parents(dev);
 	if (ret)
@@ -265,12 +265,12 @@ int clk_get_by_name(struct udevice *dev,
 {
 	int index;
 
-	debug("%s(dev=%p, name=%s, clk=%p)\n", __func__, dev, name, clk);
+	dev_dbg(dev, "%s(dev=%p, name=%s, clk=%p)\n", __func__, dev, name, clk);
 	clk->dev = NULL;
 
 	index = dev_read_stringlist_search(dev, "clock-names", name);
 	if (index < 0) {
-		debug("fdt_stringlist_search() failed: %d\n", index);
+		dev_err(dev, "fdt_stringlist_search() failed: %d\n", index);
 		return index;
 	}
 
@@ -282,7 +282,7 @@ int clk_release_all(struct clk *clk, int
 	int i, ret;
 
 	for (i = 0; i < count; i++) {
-		debug("%s(clk[%d]=%p)\n", __func__, i, &clk[i]);
+		dev_dbg(clk->dev, "%s(clk[%d]=%p)\n", __func__, i, &clk[i]);
 
 		/* check if clock has been previously requested */
 		if (!clk[i].dev)
@@ -306,7 +306,7 @@ int clk_request(struct udevice *dev, str
 {
 	const struct clk_ops *ops = clk_dev_ops(dev);
 
-	debug("%s(dev=%p, clk=%p)\n", __func__, dev, clk);
+	dev_dbg(dev, "%s(dev=%p, clk=%p)\n", __func__, dev, clk);
 
 	clk->dev = dev;
 
@@ -320,7 +320,7 @@ int clk_free(struct clk *clk)
 {
 	const struct clk_ops *ops = clk_dev_ops(clk->dev);
 
-	debug("%s(clk=%p)\n", __func__, clk);
+	dev_dbg(clk->dev, "%s(clk=%p)\n", __func__, clk);
 
 	if (!ops->free)
 		return 0;
@@ -332,7 +332,7 @@ ulong clk_get_rate(struct clk *clk)
 {
 	const struct clk_ops *ops = clk_dev_ops(clk->dev);
 
-	debug("%s(clk=%p)\n", __func__, clk);
+	dev_dbg(clk->dev, "%s(clk=%p)\n", __func__, clk);
 
 	if (!ops->get_rate)
 		return -ENOSYS;
@@ -344,7 +344,7 @@ ulong clk_set_rate(struct clk *clk, ulon
 {
 	const struct clk_ops *ops = clk_dev_ops(clk->dev);
 
-	debug("%s(clk=%p, rate=%lu)\n", __func__, clk, rate);
+	dev_dbg(clk->dev, "%s(clk=%p, rate=%lu)\n", __func__, clk, rate);
 
 	if (!ops->set_rate)
 		return -ENOSYS;
@@ -356,7 +356,7 @@ int clk_set_parent(struct clk *clk, stru
 {
 	const struct clk_ops *ops = clk_dev_ops(clk->dev);
 
-	debug("%s(clk=%p, parent=%p)\n", __func__, clk, parent);
+	dev_dbg(clk->dev, "%s(clk=%p, parent=%p)\n", __func__, clk, parent);
 
 	if (!ops->set_parent)
 		return -ENOSYS;
@@ -368,7 +368,7 @@ int clk_enable(struct clk *clk)
 {
 	const struct clk_ops *ops = clk_dev_ops(clk->dev);
 
-	debug("%s(clk=%p)\n", __func__, clk);
+	dev_dbg(clk->dev, "%s(clk=%p)\n", __func__, clk);
 
 	if (!ops->enable)
 		return -ENOSYS;
@@ -393,7 +393,7 @@ int clk_disable(struct clk *clk)
 {
 	const struct clk_ops *ops = clk_dev_ops(clk->dev);
 
-	debug("%s(clk=%p)\n", __func__, clk);
+	dev_dbg(clk->dev, "%s(clk=%p)\n", __func__, clk);
 
 	if (!ops->disable)
 		return -ENOSYS;
