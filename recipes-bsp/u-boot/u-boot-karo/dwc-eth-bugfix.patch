Index: u-boot/drivers/net/dwc_eth_qos.c
===================================================================
--- u-boot.orig/drivers/net/dwc_eth_qos.c
+++ u-boot/drivers/net/dwc_eth_qos.c
@@ -998,66 +998,19 @@ static int eqos_start(struct udevice *de
 {
 	struct eqos_priv *eqos = dev_get_priv(dev);
 	int ret, i;
-	ulong rate;
 	u32 val, tx_fifo_sz, rx_fifo_sz, tqs, rqs, pbl;
 	ulong last_rx_desc;
 
 	debug("%s(dev=%p):\n", __func__, dev);
 
-	eqos->tx_desc_idx = 0;
-	eqos->rx_desc_idx = 0;
-
-	ret = eqos->config->ops->eqos_start_clks(dev);
-	if (ret < 0) {
-		pr_err("eqos_start_clks() failed: %d\n", ret);
+	if (!eqos->phy) {
+		dev_err(dev, "No PHY attached\n");
+		ret = -ENODEV;
 		goto err;
 	}
 
-	ret = eqos->config->ops->eqos_start_resets(dev);
-	if (ret < 0) {
-		pr_err("eqos_start_resets() failed: %d\n", ret);
-		goto err_stop_clks;
-	}
-
-	udelay(10);
-
-	eqos->reg_access_ok = true;
-
-	ret = wait_for_bit_le32(&eqos->dma_regs->mode,
-				EQOS_DMA_MODE_SWR, false,
-				eqos->config->swr_wait, false);
-	if (ret) {
-		pr_err("EQOS_DMA_MODE_SWR stuck\n");
-		goto err_stop_resets;
-	}
-
-	ret = eqos->config->ops->eqos_calibrate_pads(dev);
-	if (ret < 0) {
-		pr_err("eqos_calibrate_pads() failed: %d\n", ret);
-		goto err_stop_resets;
-	}
-	rate = eqos->config->ops->eqos_get_tick_clk_rate(dev);
-
-	val = (rate / 1000000) - 1;
-	writel(val, &eqos->mac_regs->us_tic_counter);
-
-	/*
-	 * if PHY was already connected and configured,
-	 * don't need to reconnect/reconfigure again
-	 */
-	if (!eqos->phy) {
-		eqos->phy = phy_connect(eqos->mii, 0, dev,
-					eqos->config->interface(dev));
-		if (!eqos->phy) {
-			pr_err("phy_connect() failed\n");
-			goto err_stop_resets;
-		}
-		ret = phy_config(eqos->phy);
-		if (ret < 0) {
-			pr_err("phy_config() failed: %d\n", ret);
-			goto err_shutdown_phy;
-		}
-	}
+	eqos->tx_desc_idx = 0;
+	eqos->rx_desc_idx = 0;
 
 	ret = phy_startup(eqos->phy);
 	if (ret < 0) {
@@ -1067,6 +1020,7 @@ static int eqos_start(struct udevice *de
 
 	if (!eqos->phy->link) {
 		pr_err("No link\n");
+		ret = -ENOTCONN;
 		goto err_shutdown_phy;
 	}
 
@@ -1243,8 +1197,8 @@ static int eqos_start(struct udevice *de
 		rx_desc->des0 = (u32)(ulong)(eqos->rx_dma_buf +
 					     (i * EQOS_MAX_PACKET_SIZE));
 		rx_desc->des3 |= EQOS_DESC3_OWN | EQOS_DESC3_BUF1V;
+		eqos->config->ops->eqos_flush_desc(rx_desc);
 	}
-	eqos->config->ops->eqos_flush_desc(eqos->descs);
 
 	writel(0, &eqos->dma_regs->ch0_txdesc_list_haddress);
 	writel((ulong)eqos->tx_descs, &eqos->dma_regs->ch0_txdesc_list_address);
@@ -1283,12 +1237,8 @@ static int eqos_start(struct udevice *de
 
 err_shutdown_phy:
 	phy_shutdown(eqos->phy);
-err_stop_resets:
-	eqos->config->ops->eqos_stop_resets(dev);
-err_stop_clks:
-	eqos->config->ops->eqos_stop_clks(dev);
 err:
-	pr_err("FAILED: %d\n", ret);
+	pr_err("%s() FAILED: %d\n", __func__, ret);
 	return ret;
 }
 
@@ -1302,7 +1252,6 @@ static void eqos_stop(struct udevice *de
 	if (!eqos->started)
 		return;
 	eqos->started = false;
-	eqos->reg_access_ok = false;
 
 	/* Disable TX DMA */
 	clrbits_le32(&eqos->dma_regs->ch0_tx_control,
@@ -1340,8 +1289,6 @@ static void eqos_stop(struct udevice *de
 	if (eqos->phy) {
 		phy_shutdown(eqos->phy);
 	}
-	eqos->config->ops->eqos_stop_resets(dev);
-	eqos->config->ops->eqos_stop_clks(dev);
 
 	debug("%s: OK\n", __func__);
 }
@@ -1391,51 +1338,18 @@ static int eqos_recv(struct udevice *dev
 {
 	struct eqos_priv *eqos = dev_get_priv(dev);
 	struct eqos_desc *rx_desc;
+	void *dmabuf;
 	int length;
 
 	debug("%s(dev=%p, flags=%x):\n", __func__, dev, flags);
 
-	rx_desc = &(eqos->rx_descs[eqos->rx_desc_idx]);
+	rx_desc = &eqos->rx_descs[eqos->rx_desc_idx];
 	if (rx_desc->des3 & EQOS_DESC3_OWN) {
 		debug("%s: RX packet not available\n", __func__);
 		return -EAGAIN;
 	}
-
-	*packetp = eqos->rx_dma_buf +
-		(eqos->rx_desc_idx * EQOS_MAX_PACKET_SIZE);
+	dmabuf = eqos->rx_dma_buf + eqos->rx_desc_idx * EQOS_MAX_PACKET_SIZE;
 	length = rx_desc->des3 & 0x7fff;
-	debug("%s: *packetp=%p, length=%d\n", __func__, *packetp, length);
-
-	eqos->config->ops->eqos_inval_buffer(*packetp, length);
-
-	return length;
-}
-
-static int eqos_free_pkt(struct udevice *dev, uchar *packet, int length)
-{
-	struct eqos_priv *eqos = dev_get_priv(dev);
-	uchar *packet_expected;
-	struct eqos_desc *rx_desc;
-
-	debug("%s(packet=%p, length=%d)\n", __func__, packet, length);
-
-	packet_expected = eqos->rx_dma_buf +
-		(eqos->rx_desc_idx * EQOS_MAX_PACKET_SIZE);
-	if (packet != packet_expected) {
-		debug("%s: Unexpected packet (expected %p)\n", __func__,
-		      packet_expected);
-		return -EINVAL;
-	}
-
-	rx_desc = &(eqos->rx_descs[eqos->rx_desc_idx]);
-	rx_desc->des0 = (u32)(ulong)packet;
-	rx_desc->des1 = 0;
-	rx_desc->des2 = 0;
-	/*
-	 * Make sure that if HW sees the _OWN write below, it will see all the
-	 * writes to the rest of the descriptor too.
-	 */
-	mb();
 	rx_desc->des3 |= EQOS_DESC3_OWN | EQOS_DESC3_BUF1V;
 	eqos->config->ops->eqos_flush_desc(rx_desc);
 
@@ -1444,6 +1358,20 @@ static int eqos_free_pkt(struct udevice
 	eqos->rx_desc_idx++;
 	eqos->rx_desc_idx %= EQOS_DESCRIPTORS_RX;
 
+	*packetp = memalign(ARCH_DMA_MINALIGN, length);
+	if (!*packetp)
+		return -ENOMEM;
+
+	eqos->config->ops->eqos_inval_buffer(dmabuf, length);
+	memcpy(*packetp, dmabuf, length);
+
+	return length;
+}
+
+int eqos_free_pkt(struct udevice *dev, uchar *packet, int length)
+{
+	debug("%s(packet=%p, length=%d)\n", __func__, packet, length);
+	free(packet);
 	return 0;
 }
 
@@ -1593,7 +1521,8 @@ err_free_reset_eqos:
 }
 
 /* board-specific Ethernet Interface initializations. */
-__weak int board_interface_eth_init(int interface_type, bool eth_clk_sel_reg,
+__weak int board_interface_eth_init(struct udevice *dev, int interface_type,
+				    bool eth_clk_sel_reg,
 				    bool eth_ref_clk_sel_reg)
 {
 	return 0;
@@ -1618,16 +1547,33 @@ static int eqos_probe_resources_stm32(st
 	}
 
 	/* Gigabit Ethernet 125MHz clock selection. */
-	eth_clk_sel_reg = dev_read_bool(dev, "st,eth_clk_sel");
+	if (ofnode_get_property(dev_ofnode(dev), "st,eth-clk-sel", NULL)) {
+		eth_clk_sel_reg = dev_read_bool(dev, "st,eth-clk-sel");
+	} else {
+		if (ofnode_get_property(dev_ofnode(dev), "st,eth_clk_sel",
+					NULL)) {
+			dev_warn(dev,
+				 "Deprecated property 'st,eth_clk_sel' should be changed to 'st,eth-clk-sel'\n");
+		}
+		eth_clk_sel_reg = dev_read_bool(dev, "st,eth_clk_sel");
+	}
 
 	/* Ethernet 50Mhz RMII clock selection */
-	eth_ref_clk_sel_reg =
-		dev_read_bool(dev, "st,eth_ref_clk_sel");
+	if (ofnode_get_property(dev_ofnode(dev), "st,eth-ref-clk-sel", NULL)) {
+		eth_ref_clk_sel_reg = dev_read_bool(dev, "st,eth-ref-clk-sel");
+	} else {
+		if (ofnode_get_property(dev_ofnode(dev), "st,eth_ref_clk_sel",
+					NULL)) {
+			dev_warn(dev,
+				 "Deprecated property 'st,eth_ref_clk_sel' should be changed to 'st,eth-ref-clk-sel'\n");
+		}
+		eth_ref_clk_sel_reg = dev_read_bool(dev, "st,eth_ref_clk_sel");
+	}
 
-	ret = board_interface_eth_init(interface, eth_clk_sel_reg,
+	ret = board_interface_eth_init(dev, interface, eth_clk_sel_reg,
 				       eth_ref_clk_sel_reg);
 	if (ret)
-		return -EINVAL;
+		return ret;
 
 	ret = clk_get_by_name(dev, "stmmaceth", &eqos->clk_master_bus);
 	if (ret) {
@@ -1667,8 +1613,10 @@ err_probe:
 
 static int eqos_get_interface_stm32(struct udevice *dev)
 {
+	struct eqos_priv *eqos = dev_get_priv(dev);
 	const char *phy_mode;
 	int interface = -1;
+	int phy_addr;
 
 	debug("%s(dev=%p):\n", __func__, dev);
 
@@ -1677,6 +1625,12 @@ static int eqos_get_interface_stm32(stru
 	if (phy_mode)
 		interface = phy_get_interface_by_name(phy_mode);
 
+	phy_addr = fdtdec_lookup_phandle(gd->fdt_blob, dev_of_offset(dev),
+					 "phy-handle");
+	if (phy_addr > 0)
+		eqos->phy_addr = fdtdec_get_int(gd->fdt_blob, phy_addr,
+						"reg", 0);
+
 	return interface;
 }
 
@@ -1723,6 +1677,8 @@ static int eqos_probe(struct udevice *de
 {
 	struct eqos_priv *eqos = dev_get_priv(dev);
 	int ret;
+	ulong rate;
+	u32 val;
 
 	debug("%s(dev=%p):\n", __func__, dev);
 
@@ -1768,9 +1724,64 @@ static int eqos_probe(struct udevice *de
 		goto err_free_mdio;
 	}
 
+	ret = eqos->config->ops->eqos_start_clks(dev);
+	if (ret < 0) {
+		pr_err("eqos_start_clks() failed: %d\n", ret);
+		goto err_unregister_mdio;
+	}
+
+	ret = eqos->config->ops->eqos_start_resets(dev);
+	if (ret < 0) {
+		pr_err("eqos_start_resets() failed: %d\n", ret);
+		goto err_stop_clks;
+	}
+
+	udelay(10);
+
+	eqos->reg_access_ok = true;
+
+	ret = wait_for_bit_le32(&eqos->dma_regs->mode,
+				EQOS_DMA_MODE_SWR, false,
+				eqos->config->swr_wait, false);
+	if (ret) {
+		pr_err("EQOS_DMA_MODE_SWR stuck\n");
+		goto err_stop_resets;
+	}
+
+	ret = eqos->config->ops->eqos_calibrate_pads(dev);
+	if (ret < 0) {
+		pr_err("eqos_calibrate_pads() failed: %d\n", ret);
+		goto err_stop_resets;
+	}
+	rate = eqos->config->ops->eqos_get_tick_clk_rate(dev);
+
+	val = (rate / 1000000) - 1;
+	writel(val, &eqos->mac_regs->us_tic_counter);
+
+	eqos->phy = phy_connect(eqos->mii, eqos->phy_addr, dev,
+				eqos->config->interface(dev));
+	if (!eqos->phy) {
+		pr_err("phy_connect() failed\n");
+		ret = -EIO;
+		goto err_stop_resets;
+	}
+	ret = phy_config(eqos->phy);
+	if (ret < 0) {
+		pr_err("phy_config() failed: %d\n", ret);
+		goto err_shutdown_phy;
+	}
+
 	debug("%s: OK\n", __func__);
 	return 0;
 
+err_shutdown_phy:
+	phy_shutdown(eqos->phy);
+err_stop_resets:
+	eqos->config->ops->eqos_stop_resets(dev);
+err_stop_clks:
+	eqos->config->ops->eqos_stop_clks(dev);
+err_unregister_mdio:
+	mdio_unregister(eqos->mii);
 err_free_mdio:
 	mdio_free(eqos->mii);
 err_remove_resources_tegra:
@@ -1788,12 +1799,12 @@ static int eqos_remove(struct udevice *d
 
 	debug("%s(dev=%p):\n", __func__, dev);
 
+	eqos->config->ops->eqos_stop_resets(dev);
+	eqos->config->ops->eqos_stop_clks(dev);
 	mdio_unregister(eqos->mii);
 	mdio_free(eqos->mii);
 	eqos->config->ops->eqos_remove_resources(dev);
 
-	eqos_probe_resources_core(dev);
-
 	debug("%s: OK\n", __func__);
 	return 0;
 }
@@ -1864,11 +1875,11 @@ static const struct eqos_config eqos_stm
 static const struct udevice_id eqos_ids[] = {
 	{
 		.compatible = "nvidia,tegra186-eqos",
-		.data = (ulong)&eqos_tegra186_config
+		.data = (ulong)&eqos_tegra186_config,
 	},
 	{
 		.compatible = "snps,dwmac-4.20a",
-		.data = (ulong)&eqos_stm32_config
+		.data = (ulong)&eqos_stm32_config,
 	},
 
 	{ }
Index: u-boot/include/netdev.h
===================================================================
--- u-boot.orig/include/netdev.h
+++ u-boot/include/netdev.h
@@ -21,8 +21,10 @@
  */
 
 int board_eth_init(bd_t *bis);
-int board_interface_eth_init(int interface_type, bool eth_clk_sel_reg,
-			     bool eth_ref_clk_sel_reg);
+
+struct udevice;
+int board_interface_eth_init(struct udevice *dev, int interface_type,
+			     bool eth_clk_sel_reg, bool eth_ref_clk_sel_reg);
 int cpu_eth_init(bd_t *bis);
 
 /* Driver initialization prototypes */
