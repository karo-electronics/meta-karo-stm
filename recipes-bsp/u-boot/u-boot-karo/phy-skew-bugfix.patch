Index: u-boot/drivers/net/phy/micrel_ksz90x1.c
===================================================================
--- u-boot.orig/drivers/net/phy/micrel_ksz90x1.c
+++ u-boot/drivers/net/phy/micrel_ksz90x1.c
@@ -101,40 +101,62 @@ static const struct ksz90x1_reg_field ks
 	{ "rxc-skew-ps", 5, 0, 0xf }, { "txc-skew-ps", 5, 5, 0xf }
 };
 
+static inline u16 ps_to_regval(int val, int bits, int offset)
+{
+	const int PS_TO_REGVAL = 60;
+	u16 regval;
+	u16 mask = (1 << (bits - 1)) - 1;
+
+	if (val / PS_TO_REGVAL < -mask)
+		regval = 0;
+	else if (val / PS_TO_REGVAL > mask)
+		regval = (1 << bits) - 1;
+	else
+		regval = DIV_ROUND_CLOSEST(val, PS_TO_REGVAL) + mask;
+
+	debug("%s@%d: Skew %dps => %02x\n", __func__, __LINE__,
+	      val, regval);
+
+	return regval << offset;
+}
+
 static int ksz90x1_of_config_group(struct phy_device *phydev,
 				   struct ksz90x1_ofcfg *ofcfg)
 {
 	struct udevice *dev = phydev->dev;
 	struct phy_driver *drv = phydev->drv;
-	const int ps_to_regval = 60;
-	int val[4];
-	int i, changed = 0, offset, max;
+	int val;
+	int i, changed = 0, offset;
 	u16 regval = 0;
+	struct ofnode_phandle_args phandle_args;
+	ofnode of_node = dev_ofnode(dev);
+	int ret;
 
 	if (!drv || !drv->writeext)
 		return -EOPNOTSUPP;
 
+	ret = dev_read_phandle_with_args(dev, "phy-handle", NULL, 0, 0,
+					 &phandle_args);
+	if (ret == 0)
+		of_node = phandle_args.node;
+
 	for (i = 0; i < ofcfg->grpsz; i++) {
-		val[i] = dev_read_u32_default(dev, ofcfg->grp[i].name, ~0);
+		val = ofnode_read_u32_default(of_node, ofcfg->grp[i].name, 0);
 		offset = ofcfg->grp[i].off;
-		if (val[i] == -1) {
+		if (val == 0) {
 			/* Default register value for KSZ9021 */
 			regval |= ofcfg->grp[i].dflt << offset;
 		} else {
 			changed = 1;	/* Value was changed in OF */
-			/* Calculate the register value and fix corner cases */
-			if (val[i] > ps_to_regval * 0xf) {
-				max = (1 << ofcfg->grp[i].size) - 1;
-				regval |= max << offset;
-			} else {
-				regval |= (val[i] / ps_to_regval) << offset;
-			}
+			regval |= ps_to_regval(val, ofcfg->grp[i].size, offset);
 		}
 	}
 
 	if (!changed)
 		return 0;
 
+	dev_dbg(dev, "Writing %04x to PHY reg %02x\n", regval, ofcfg->reg);
+
 	return drv->writeext(phydev, 0, ofcfg->devad, ofcfg->reg, regval);
 }
 
@@ -286,16 +308,16 @@ static struct phy_driver ksz9021_driver
 int ksz9031_phy_extended_write(struct phy_device *phydev,
 			       int devaddr, int regnum, u16 mode, u16 val)
 {
-	/*select register addr for mmd*/
+	/* select register addr for mmd */
 	phy_write(phydev, MDIO_DEVAD_NONE,
 		  MII_KSZ9031_MMD_ACCES_CTRL, devaddr);
-	/*select register for mmd*/
+	/* select register for mmd */
 	phy_write(phydev, MDIO_DEVAD_NONE,
 		  MII_KSZ9031_MMD_REG_DATA, regnum);
-	/*setup mode*/
+	/* setup mode */
 	phy_write(phydev, MDIO_DEVAD_NONE,
 		  MII_KSZ9031_MMD_ACCES_CTRL, (mode | devaddr));
-	/*write the value*/
+	/* write the value */
 	return	phy_write(phydev, MDIO_DEVAD_NONE,
 			  MII_KSZ9031_MMD_REG_DATA, val);
 }
@@ -329,6 +351,7 @@ static int ksz9031_phy_extwrite(struct p
 static int ksz9031_config(struct phy_device *phydev)
 {
 	int ret;
+	unsigned int features = phydev->drv->features;
 
 	ret = ksz9031_of_config(phydev);
 	if (ret)
@@ -339,11 +362,9 @@ static int ksz9031_config(struct phy_dev
 
 	/* add an option to disable the gigabit feature of this PHY */
 	if (env_get("disable_giga")) {
-		unsigned features;
 		unsigned bmcr;
 
 		/* disable speed 1000 in features supported by the PHY */
-		features = phydev->drv->features;
 		features &= ~(SUPPORTED_1000baseT_Half |
 				SUPPORTED_1000baseT_Full);
 		phydev->advertising = phydev->supported = features;
@@ -361,6 +382,18 @@ static int ksz9031_config(struct phy_dev
 		genphy_restart_aneg(phydev);
 
 		return 0;
+	} else {
+		/* force master mode for 1000BaseT due to chip errata */
+		uint16_t ctrl1000 = 0;
+		const uint16_t master = CTRL1000_PREFER_MASTER |
+			CTRL1000_CONFIG_MASTER | CTRL1000_MANUAL_CONFIG;
+
+		if (features & SUPPORTED_1000baseT_Half)
+			ctrl1000 |= ADVERTISE_1000HALF | master;
+		if (features & SUPPORTED_1000baseT_Full)
+			ctrl1000 |= ADVERTISE_1000FULL | master;
+
+		phy_write(phydev, MDIO_DEVAD_NONE, MII_CTRL1000, ctrl1000);
 	}
 
 	return genphy_config(phydev);
