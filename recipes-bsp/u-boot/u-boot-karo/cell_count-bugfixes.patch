Index: u-boot/drivers/core/of_access.c
===================================================================
--- u-boot.orig/drivers/core/of_access.c
+++ u-boot/drivers/core/of_access.c
@@ -702,20 +702,22 @@ struct device_node *of_parse_phandle(con
 
 int of_parse_phandle_with_args(const struct device_node *np,
 			       const char *list_name, const char *cells_name,
-			       int index, struct of_phandle_args *out_args)
+			       int cell_count, int index,
+			       struct of_phandle_args *out_args)
 {
 	if (index < 0)
 		return -EINVAL;
 
-	return __of_parse_phandle_with_args(np, list_name, cells_name, 0,
-					    index, out_args);
+	return __of_parse_phandle_with_args(np, list_name, cells_name,
+					    cell_count, index, out_args);
 }
 
 int of_count_phandle_with_args(const struct device_node *np,
-			       const char *list_name, const char *cells_name)
+			       const char *list_name, const char *cells_name,
+			       int cell_count)
 {
-	return __of_parse_phandle_with_args(np, list_name, cells_name, 0,
-					    -1, NULL);
+	return __of_parse_phandle_with_args(np, list_name, cells_name,
+					    cell_count, -1, NULL);
 }
 
 static void of_alias_add(struct alias_prop *ap, struct device_node *np,
Index: u-boot/drivers/core/ofnode.c
===================================================================
--- u-boot.orig/drivers/core/ofnode.c
+++ u-boot/drivers/core/ofnode.c
@@ -362,8 +362,8 @@ int ofnode_parse_phandle_with_args(ofnod
 		int ret;
 
 		ret = of_parse_phandle_with_args(ofnode_to_np(node),
-						 list_name, cells_name, index,
-						 &args);
+						 list_name, cells_name,
+						 cell_count, index, &args);
 		if (ret)
 			return ret;
 		ofnode_from_of_phandle_args(&args, out_args);
@@ -384,15 +384,17 @@ int ofnode_parse_phandle_with_args(ofnod
 }
 
 int ofnode_count_phandle_with_args(ofnode node, const char *list_name,
-				   const char *cells_name)
+				   const char *cells_name, int cell_count)
 {
 	if (ofnode_is_np(node))
 		return of_count_phandle_with_args(ofnode_to_np(node),
-				list_name, cells_name);
+						  list_name, cells_name,
+						  cell_count);
 	else
 		return fdtdec_parse_phandle_with_args(gd->fdt_blob,
-				ofnode_to_offset(node), list_name, cells_name,
-				0, -1, NULL);
+						      ofnode_to_offset(node),
+						      list_name, cells_name,
+						      cell_count, -1, NULL);
 }
 
 ofnode ofnode_path(const char *path)
Index: u-boot/drivers/core/read.c
===================================================================
--- u-boot.orig/drivers/core/read.c
+++ u-boot/drivers/core/read.c
@@ -124,10 +124,10 @@ int dev_read_phandle_with_args(struct ud
 }
 
 int dev_count_phandle_with_args(struct udevice *dev, const char *list_name,
-				const char *cells_name)
+				const char *cells_name, int cell_count)
 {
 	return ofnode_count_phandle_with_args(dev_ofnode(dev), list_name,
-					      cells_name);
+					      cells_name, cell_count);
 }
 
 int dev_read_addr_cells(struct udevice *dev)
Index: u-boot/include/dm/of_access.h
===================================================================
--- u-boot.orig/include/dm/of_access.h
+++ u-boot/include/dm/of_access.h
@@ -348,6 +348,7 @@ struct device_node *of_parse_phandle(con
  * @np:		pointer to a device tree node containing a list
  * @list_name:	property name that contains a list
  * @cells_name:	property name that specifies phandles' arguments count
+ * @cell_count: hardcoded value of cell count if cells_name is NULL
  * @index:	index of a phandle to parse out
  * @out_args:	optional pointer to output arguments structure (will be filled)
  * @return 0 on success (with @out_args filled out if not NULL), -ENOENT if
@@ -381,7 +382,8 @@ struct device_node *of_parse_phandle(con
  */
 int of_parse_phandle_with_args(const struct device_node *np,
 			       const char *list_name, const char *cells_name,
-			       int index, struct of_phandle_args *out_args);
+			       int cell_count, int index,
+			       struct of_phandle_args *out_args);
 
 /**
  * of_count_phandle_with_args() - Count the number of phandle in a list
@@ -389,6 +391,7 @@ int of_parse_phandle_with_args(const str
  * @np:		pointer to a device tree node containing a list
  * @list_name:	property name that contains a list
  * @cells_name:	property name that specifies phandles' arguments count
+ * @cell_count: hardcoded value of cell count if cells_name is NULL
  * @return number of phandle found, -ENOENT if
  *	@list_name does not exist, -EINVAL if a phandle was not found,
  *	@cells_name could not be found, the arguments were truncated or there
@@ -399,7 +402,8 @@ int of_parse_phandle_with_args(const str
  *
  */
 int of_count_phandle_with_args(const struct device_node *np,
-			       const char *list_name, const char *cells_name);
+			       const char *list_name, const char *cells_name,
+			       int cell_count);
 
 /**
  * of_alias_scan() - Scan all properties of the 'aliases' node
Index: u-boot/include/dm/ofnode.h
===================================================================
--- u-boot.orig/include/dm/ofnode.h
+++ u-boot/include/dm/ofnode.h
@@ -447,7 +447,7 @@ int ofnode_read_string_count(ofnode node
  * @node:	device tree node containing a list
  * @list_name:	property name that contains a list
  * @cells_name:	property name that specifies phandles' arguments count
- * @cells_count: Cell count to use if @cells_name is NULL
+ * @cell_count: Cell count to use if @cells_name is NULL
  * @index:	index of a phandle to parse out
  * @out_args:	optional pointer to output arguments structure (will be filled)
  * @return 0 on success (with @out_args filled out if not NULL), -ENOENT if
@@ -470,12 +470,13 @@ int ofnode_parse_phandle_with_args(ofnod
  * @node:	device tree node containing a list
  * @list_name:	property name that contains a list
  * @cells_name:	property name that specifies phandles' arguments count
+ * @cell_count: Cell count to use if @cells_name is NULL
  * @return number of phandle on success, -ENOENT if @list_name does not
  *      exist, -EINVAL if a phandle was not found, @cells_name could not
  *      be found.
  */
 int ofnode_count_phandle_with_args(ofnode node, const char *list_name,
-				   const char *cells_name);
+				   const char *cells_name, int cell_count);
 
 /**
  * ofnode_path() - find a node by full path
Index: u-boot/include/dm/read.h
===================================================================
--- u-boot.orig/include/dm/read.h
+++ u-boot/include/dm/read.h
@@ -249,7 +249,7 @@ int dev_read_string_count(struct udevice
  * @dev:	device whose node containing a list
  * @list_name:	property name that contains a list
  * @cells_name:	property name that specifies phandles' arguments count
- * @cells_count: Cell count to use if @cells_name is NULL
+ * @cell_count: Cell count to use if @cells_name is NULL
  * @index:	index of a phandle to parse out
  * @out_args:	optional pointer to output arguments structure (will be filled)
  * @return 0 on success (with @out_args filled out if not NULL), -ENOENT if
@@ -273,12 +273,13 @@ int dev_read_phandle_with_args(struct ud
  * @dev:	device whose node containing a list
  * @list_name:	property name that contains a list
  * @cells_name:	property name that specifies phandles' arguments count
+ * @cell_count: Cell count to use if @cells_name is NULL
  * @Returns number of phandle found on success, on error returns appropriate
  * errno value.
  */
 
 int dev_count_phandle_with_args(struct udevice *dev, const char *list_name,
-				const char *cells_name);
+				const char *cells_name, int cell_count);
 
 /**
  * dev_read_addr_cells() - Get the number of address cells for a device's node
@@ -556,10 +557,12 @@ static inline int dev_read_phandle_with_
 }
 
 static inline int dev_count_phandle_with_args(struct udevice *dev,
-		const char *list_name, const char *cells_name)
+					      const char *list_name,
+					      const char *cells_name,
+					      int cell_count)
 {
 	return ofnode_count_phandle_with_args(dev_ofnode(dev), list_name,
-					      cells_name);
+					      cells_name, cell_count);
 }
 
 static inline int dev_read_addr_cells(struct udevice *dev)
Index: u-boot/board/st/stm32mp1/stm32mp1.c
===================================================================
--- u-boot.orig/board/st/stm32mp1/stm32mp1.c
+++ u-boot/board/st/stm32mp1/stm32mp1.c
@@ -548,7 +548,7 @@ static int board_check_usb_power(void)
 	 * for each of them
 	 */
 	adc_count = ofnode_count_phandle_with_args(node, "st,adc_usb_pd",
-						   "#io-channel-cells");
+						   "#io-channel-cells", 0);
 	if (adc_count < 0) {
 		if (adc_count == -ENOENT)
 			return 0;
Index: u-boot/drivers/clk/clk-uclass.c
===================================================================
--- u-boot.orig/drivers/clk/clk-uclass.c
+++ u-boot/drivers/clk/clk-uclass.c
@@ -107,10 +107,10 @@ int clk_get_by_index(struct udevice *dev
 int clk_get_bulk(struct udevice *dev, struct clk_bulk *bulk)
 {
 	int i, ret, err, count;
-	
+
 	bulk->count = 0;
 
-	count = dev_count_phandle_with_args(dev, "clocks", "#clock-cells");
+	count = dev_count_phandle_with_args(dev, "clocks", "#clock-cells", 0);
 	if (count < 1)
 		return count;
 
@@ -145,7 +145,7 @@ static int clk_set_default_parents(struc
 	int ret;
 
 	num_parents = dev_count_phandle_with_args(dev, "assigned-clock-parents",
-						  "#clock-cells");
+						  "#clock-cells", 0);
 	if (num_parents < 0) {
 		dev_dbg(dev, "%s: no assigned-clock-parents\n", __func__);
 		return 0;
Index: u-boot/drivers/net/designware.c
===================================================================
--- u-boot.orig/drivers/net/designware.c
+++ u-boot/drivers/net/designware.c
@@ -679,7 +679,8 @@ int designware_eth_probe(struct udevice
 	int i, err, clock_nb;
 
 	priv->clock_count = 0;
-	clock_nb = dev_count_phandle_with_args(dev, "clocks", "#clock-cells");
+	clock_nb = dev_count_phandle_with_args(dev, "clocks", "#clock-cells",
+					       0);
 	if (clock_nb > 0) {
 		priv->clocks = devm_kcalloc(dev, clock_nb, sizeof(struct clk),
 					    GFP_KERNEL);
Index: u-boot/drivers/reset/reset-uclass.c
===================================================================
--- u-boot.orig/drivers/reset/reset-uclass.c
+++ u-boot/drivers/reset/reset-uclass.c
@@ -81,10 +81,10 @@ int reset_get_by_index(struct udevice *d
 int reset_get_bulk(struct udevice *dev, struct reset_ctl_bulk *bulk)
 {
 	int i, ret, err, count;
-	
+
 	bulk->count = 0;
 
-	count = dev_count_phandle_with_args(dev, "resets", "#reset-cells");
+	count = dev_count_phandle_with_args(dev, "resets", "#reset-cells", 0);
 	if (count < 1)
 		return count;
 
Index: u-boot/drivers/usb/host/ehci-generic.c
===================================================================
--- u-boot.orig/drivers/usb/host/ehci-generic.c
+++ u-boot/drivers/usb/host/ehci-generic.c
@@ -83,7 +83,7 @@ static int ehci_usb_probe(struct udevice
 	err = 0;
 	priv->clock_count = 0;
 	clock_nb = ofnode_count_phandle_with_args(dev_ofnode(dev), "clocks",
-						  "#clock-cells");
+						  "#clock-cells", 0);
 	if (clock_nb > 0) {
 		priv->clocks = devm_kcalloc(dev, clock_nb, sizeof(struct clk),
 					    GFP_KERNEL);
@@ -113,7 +113,7 @@ static int ehci_usb_probe(struct udevice
 
 	priv->reset_count = 0;
 	reset_nb = ofnode_count_phandle_with_args(dev_ofnode(dev), "resets",
-						  "#reset-cells");
+						  "#reset-cells", 0);
 	if (reset_nb > 0) {
 		priv->resets = devm_kcalloc(dev, reset_nb,
 					    sizeof(struct reset_ctl),
Index: u-boot/drivers/usb/host/ehci-sunxi.c
===================================================================
--- u-boot.orig/drivers/usb/host/ehci-sunxi.c
+++ u-boot/drivers/usb/host/ehci-sunxi.c
@@ -60,7 +60,7 @@ static int ehci_usb_probe(struct udevice
 	priv->reset0_cfg = (void *)priv->ccm +
 				   priv->cfg->reset0_cfg_offset;
 
-	phys = dev_count_phandle_with_args(dev, "phys", "#phy-cells");
+	phys = dev_count_phandle_with_args(dev, "phys", "#phy-cells", 0);
 	if (phys < 0) {
 		phys = 0;
 		goto no_phy;
Index: u-boot/drivers/usb/host/ohci-generic.c
===================================================================
--- u-boot.orig/drivers/usb/host/ohci-generic.c
+++ u-boot/drivers/usb/host/ohci-generic.c
@@ -82,7 +82,8 @@ static int ohci_usb_probe(struct udevice
 
 	err = 0;
 	priv->clock_count = 0;
-	clock_nb = dev_count_phandle_with_args(dev, "clocks", "#clock-cells");
+	clock_nb = dev_count_phandle_with_args(dev, "clocks", "#clock-cells",
+					       0);
 	if (clock_nb > 0) {
 		priv->clocks = devm_kcalloc(dev, clock_nb, sizeof(struct clk),
 					    GFP_KERNEL);
@@ -108,7 +109,8 @@ static int ohci_usb_probe(struct udevice
 	}
 
 	priv->reset_count = 0;
-	reset_nb = dev_count_phandle_with_args(dev, "resets", "#reset-cells");
+	reset_nb = dev_count_phandle_with_args(dev, "resets", "#reset-cells",
+					       0);
 	if (reset_nb > 0) {
 		priv->resets = devm_kcalloc(dev, reset_nb,
 					    sizeof(struct reset_ctl),
Index: u-boot/drivers/usb/host/ohci-sunxi.c
===================================================================
--- u-boot.orig/drivers/usb/host/ohci-sunxi.c
+++ u-boot/drivers/usb/host/ohci-sunxi.c
@@ -66,7 +66,7 @@ static int ohci_usb_probe(struct udevice
 	priv->reset0_cfg = (void *)priv->ccm +
 				   priv->cfg->reset0_cfg_offset;
 
-	phys = dev_count_phandle_with_args(dev, "phys", "#phy-cells");
+	phys = dev_count_phandle_with_args(dev, "phys", "#phy-cells", 0);
 	if (phys < 0) {
 		phys = 0;
 		goto no_phy;
Index: u-boot/drivers/usb/host/xhci-dwc3.c
===================================================================
--- u-boot.orig/drivers/usb/host/xhci-dwc3.c
+++ u-boot/drivers/usb/host/xhci-dwc3.c
@@ -119,7 +119,7 @@ static int xhci_dwc3_setup_phy(struct ud
 	if (!dev_read_prop(dev, "phys", NULL))
 		return 0;
 
-	count = dev_count_phandle_with_args(dev, "phys", "#phy-cells");
+	count = dev_count_phandle_with_args(dev, "phys", "#phy-cells", 0);
 	if (count <= 0)
 		return count;
 
