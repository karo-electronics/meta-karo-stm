Index: u-boot/tools/Makefile
===================================================================
--- u-boot.orig/tools/Makefile
+++ u-boot/tools/Makefile
@@ -258,8 +258,14 @@ __build:	$(LOGO-y)
 $(LOGO_H):	$(obj)/bmp_logo $(LOGO_BMP)
 	$(obj)/bmp_logo --gen-info $(LOGO_BMP) > $@
 
+ifeq ($(CONFIG_DM_VIDEO),y)
+$(LOGO_DATA_H):	$(obj)/bmp_logo $(LOGO_BMP)
+	$(obj)/bmp_logo --gen-bmp $(LOGO_BMP) > $@
+else
 $(LOGO_DATA_H):	$(obj)/bmp_logo $(LOGO_BMP)
 	$(obj)/bmp_logo --gen-data $(LOGO_BMP) > $@
+#endif
+endif
 
 # Let clean descend into subdirs
 subdir- += env
Index: u-boot/tools/bmp_logo.c
===================================================================
--- u-boot.orig/tools/bmp_logo.c
+++ u-boot/tools/bmp_logo.c
@@ -2,7 +2,8 @@
 
 enum {
 	MODE_GEN_INFO,
-	MODE_GEN_DATA
+	MODE_GEN_DATA,
+	MODE_GEN_BMP
 };
 
 typedef struct bitmap_s {		/* bitmap description */
@@ -16,7 +17,8 @@ typedef struct bitmap_s {		/* bitmap des
 
 void usage(const char *prog)
 {
-	fprintf(stderr, "Usage: %s [--gen-info|--gen-data] file\n", prog);
+	fprintf(stderr, "Usage: %s [--gen-info|--gen-data|--gen-bmp] file\n",
+		prog);
 }
 
 /*
@@ -73,6 +75,7 @@ void gen_info(bitmap_t *b, uint16_t n_co
 int main (int argc, char *argv[])
 {
 	int	mode, i, x;
+	int	size;
 	FILE	*fp;
 	bitmap_t bmp;
 	bitmap_t *b = &bmp;
@@ -87,6 +90,8 @@ int main (int argc, char *argv[])
 		mode = MODE_GEN_INFO;
 	else if (!strcmp(argv[1], "--gen-data"))
 		mode = MODE_GEN_DATA;
+	else if (!strcmp(argv[1], "--gen-bmp"))
+		mode = MODE_GEN_BMP;
 	else {
 		usage(argv[0]);
 		exit(EXIT_FAILURE);
@@ -131,6 +136,7 @@ int main (int argc, char *argv[])
 	b->width = le_short(b->width);
 	b->height = le_short(b->height);
 	n_colors = le_short(n_colors);
+	size = b->width * b->height;
 
 	/* assume we are working with an 8-bit file */
 	if ((n_colors == 0) || (n_colors > 256 - DEFAULT_CMAP_SIZE)) {
@@ -152,10 +158,6 @@ int main (int argc, char *argv[])
 		"#ifndef __BMP_LOGO_DATA_H__\n"
 		"#define __BMP_LOGO_DATA_H__\n\n");
 
-	/* allocate memory */
-	if ((b->data = (uint8_t *)malloc(b->width * b->height)) == NULL)
-		error ("Error allocating memory for file", fp);
-
 	/* read and print the palette information */
 	printf("unsigned short bmp_logo_palette[] = {\n");
 
@@ -175,21 +177,39 @@ int main (int argc, char *argv[])
 	}
 
 	/* seek to offset indicated by file header */
-	fseek(fp, (long)data_offset, SEEK_SET);
+	if (mode == MODE_GEN_BMP) {
+		/* copy full bmp file */
+		fseek(fp, 0L, SEEK_END);
+		size = ftell(fp);
+		fseek(fp, 0L, SEEK_SET);
+	} else {
+		fseek(fp, (long)data_offset, SEEK_SET);
+	}
+
+	/* allocate memory */
+	b->data = (uint8_t *)malloc(size);
+	if (!b->data)
+		error("Error allocating memory for file", fp);
 
 	/* read the bitmap; leave room for default color map */
 	printf ("\n");
 	printf ("};\n");
 	printf ("\n");
 	printf("unsigned char bmp_logo_bitmap[] = {\n");
-	for (i=(b->height-1)*b->width; i>=0; i-=b->width) {
-		for (x = 0; x < b->width; x++) {
-			b->data[i + x] = (uint8_t) fgetc(fp)
+	if (mode == MODE_GEN_BMP) {
+		/* write full bmp */
+		for (i = 0; i < size; i++)
+			b->data[i] = (uint8_t)fgetc(fp);
+	} else {
+		for (i = (b->height - 1) * b->width; i >= 0; i -= b->width) {
+			for (x = 0; x < b->width; x++) {
+				b->data[i + x] = (uint8_t)fgetc(fp)
 						+ DEFAULT_CMAP_SIZE;
+			}
 		}
 	}
 
-	for (i=0; i<(b->height*b->width); ++i) {
+	for (i = 0; i < size; ++i) {
 		if ((i%8) == 0)
 			putchar ('\t');
 		printf ("0x%02X,%c",
